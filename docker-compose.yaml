# create mount points first
#   mkdir -p mysql/data
#   mkdir -p mediawiki/data && chown www-data:www-data mediawiki/data
#   mkdir -p blazegraph/data

services:
    db:
        image: mysql:8.0.17
        # command starts mysql with passwort enabled and log expire (they build up to several GBs otherwise)
        command: mysqld --default-authentication-plugin=mysql_native_password --expire_logs_days=3
        cap_add:
          - SYS_NICE  # CAP_SYS_NICE, fix error mbind: Operation not permitted
        restart: unless-stopped
        ports:
            - "${MYSQL_HOST_PORT}:3306"
        environment:
            - MYSQL_ROOT_HOST=%
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - ./mysql/data:/var/lib/mysql

    graphdb:
        image: nawer/blazegraph
        restart: unless-stopped
        environment:
            JAVA_XMS: 512m
            JAVA_XMX: 1g
        volumes:
            - ./blazegraph/data:/var/lib/blazegraph
            - ./blazegraph/config:/docker-entrypoint-initdb.d
        ports:
            - "${GRAPHDB_HOST_PORT}:9999"

    fuseki:
        # https://github.com/SemanticComputing/fuseki-docker
        # https://hub.docker.com/r/secoresearch/fuseki
        # http://fuseki:3030/ds/sparql
        # http://fuseki:3030/ds/update
        image: secoresearch/fuseki
        profiles: [fuseki]
        restart: unless-stopped
        volumes:
        - './fuseki/data:/fuseki-base/databases'
        - './fuseki/config/shiro.ini:/jena-fuseki/shiro.ini' # override config before docker-init
        #- './fuseki/config/shiro.ini:/fuseki-base/shiro.ini' # override config after docker-init
        - './fuseki/config/log4j2.properties:/jena-fuseki/log4j2.properties' # override config 
        user: root  # Run the container with root user
        #ports:
        #- "${GRAPHDB_HOST_PORT}:3030"
        environment:
        - JVM_ARGS=-Xmx4G -Dlog4j2.formatMsgNoLookups=true # CVE-2021-44228 [MIT2021]
        - ADMIN_PASSWORD=${MW_ADMIN_PASS}
        - ENABLE_DATA_WRITE=true
        - ENABLE_UPDATE=true
        - ENABLE_UPLOAD=true
        - QUERY_TIMEOUT=60000 # in milliseconds (60 seconds by default)


    mediawiki:
        image: opensemanticlab/osl-mw
        build:
            context: ./mediawiki/build
            dockerfile: Dockerfile
            args:
               SSH_PASS: ${SSH_PASS}
        restart: unless-stopped
        depends_on:
            - db
            - elasticsearch
            - memcached
            - graphdb
            - drawio
        #networks:
        #    - default
        #    - inter_docker
        ports:
            - "${MW_HOST_PORT}:80"
            - "${SSH_HOST_PORT}:22"
        volumes:
            - ./mediawiki/config/CustomSettings.php:/var/www/html/w/CustomSettings.php
            - ./mediawiki/data:/var/www/html/w/images
        environment:
            - TZ=${MW_TIME_ZONE}
            - MW_SITE_SERVER=${MW_SITE_SERVER}
            - MW_SITE_NAME=${MW_SITE_NAME}
            - MW_SITE_LANG=${MW_SITE_LANG}
            - MW_TIME_ZONE=${MW_TIME_ZONE}
            - MW_DEFAULT_SKIN=Citizen
            - MW_ENABLE_UPLOADS=1
            - MW_USE_INSTANT_COMMONS=0
            - MW_ADMIN_USER=admin
            - MW_ADMIN_PASS=${MW_ADMIN_PASS}
            - MW_DB_NAME=mediawiki
            - MW_DB_USER=mwuser
            - MW_DB_PASS=${MW_DB_PASS}
            - MW_DB_INSTALLDB_USER=root
            - MW_DB_INSTALLDB_PASS=${MYSQL_ROOT_PASSWORD}
            - MW_AUTOUPDATE=true
            - MW_REINSTALL=true
            - MW_AUTOINSTALL_CA_CERTS=true
            - MW_PAGE_PACKAGES=${MW_PAGE_PACKAGES}
            - MW_AUTOIMPORT_PAGES=${MW_AUTOIMPORT_PAGES}
            - MW_AUTOBUILD_SITEMAP=${MW_AUTOBUILD_SITEMAP}
            - MW_MAIN_CACHE_TYPE=CACHE_MEMCACHED
            - MW_MEMCACHED_SERVERS=memcached:11211
            - MW_SEARCH_TYPE=CirrusSearch
            - MW_CIRRUS_SEARCH_SERVERS=elasticsearch
            - MW_REST_DOMAIN=mediawiki
            - MW_FLOW_NAMESPACES=NS_TALK,NS_USER_TALK
            - PHP_LOG_ERRORS=On
            - PHP_ERROR_REPORTING=E_ALL #Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT
            - DRAWIO_SERVER=${DRAWIO_SERVER} #public url

    memcached:
        image: memcached
        restart: unless-stopped

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
        restart: unless-stopped
        environment:
           - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
           - "discovery.type=single-node"
           - bootstrap.memory_lock=true

    drawio:
        image: jgraph/drawio
        restart: unless-stopped
        ports:
            - "${DRAWIO_HOST_PORT}:8080"

    sparklis: 
        image: sferre/sparklis
        profiles: [sparklis]
        restart: unless-stopped
        #ports:
        #    - "${SPARKLIS_HOST_PORT}:8080"

    codeceptjs:
        #image: codeceptjs/codeceptjs
        build: ./tests/codecept
        profiles: [testing]
        depends_on:
            #- firefox
            #- chrome
            - selenoid
            - selenoid-ui
        environment:
            - MW_SITE_SERVER=${MW_SITE_SERVER}
            - MW_ADMIN_USER=admin
            - MW_ADMIN_PASS=${MW_ADMIN_PASS}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./tests/codecept:/tests
        #command: codeceptjs run --config=codecept.json osl-testing-codecept/tests/codecept/codecept.conf.js

    selenoid:
        image: aerokube/selenoid:latest-release
        container_name: selenoid
        profiles: [testing]
        ports:
            - '4444:4444'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            #- ./tests/selenoid:/etc/selenoid/:ro
            #- ./tests/selenoid/output/video/:/opt/selenoid/video/
            - ./tests/codecept:/etc/selenoid/:ro
            - ./tests/codecept/output/video/:/opt/selenoid/video/
        environment:
            - OVERRIDE_VIDEO_OUTPUT_DIR=$PWD/tests/codecept/output/video
        # see: https://aerokube.com/selenoid/1.6.0/#_selenoid_with_docker_compose
        command: ["-container-network", "${COMPOSE_PROJECT_NAME}_default"]

    selenoid-ui:
        image: aerokube/selenoid-ui:latest-release
        profiles: [testing]
        command: --selenoid-uri http://selenoid:4444
        ports:
            - 8080:8080

#for internal connections, e. g. non public dockered email server
#networks:
#    default:
#
#    inter_docker:
#        external:
#            name: mail_network
